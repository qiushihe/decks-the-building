{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ApiGatewayDeploymentStageNameParameter": {
      "Description": "Name of the API Gateway Deployment Stage. This would appear as the path on the URL of the deployment.",
      "Type": "String",
      "Default": "decks-the-building"
    }
  },
  "Resources": {
    "GetRandomIdFnRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "GetRandomIdFn": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var https=require(\"https\"),url=require(\"url\"),newId=function(b,c){var d=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"),a=[];c=c||d.length;b=b||22;var e;for(e=0;e<b;e++)a[e]=d[0|Math.random()*c];return a.join(\"\")};\nexports.handler=function(b,c){var d=JSON.stringify({Status:\"SUCCESS\",PhysicalResourceId:c.logStreamName,StackId:b.StackId,RequestId:b.RequestId,LogicalResourceId:b.LogicalResourceId,Data:{Value:newId(10,62)}}),a=url.parse(b.ResponseURL);a=https.request({hostname:a.hostname,port:443,path:a.path,method:\"PUT\",headers:{\"content-length\":d.length}},function(){return c.done()});a.on(\"error\",function(){return c.done()});a.write(d);a.end()};"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["GetRandomIdFnRole", "Arn"]
        },
        "Runtime": "nodejs12.x"
      }
    },
    "RandomId": {
      "Type": "Custom::RandomId",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt" : ["GetRandomIdFn", "Arn"]
        }
      }
    },
    "LambdaFnRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/${FunctionName}:*", {
                        "Region": { "Ref": "AWS::Region" },
                        "AccountId": { "Ref": "AWS::AccountId" },
                        "FunctionName": {
                          "Fn::Sub": [
                            "${Prefix}-authorizer-function-${Suffix}", {
                              "Prefix": { "Ref": "AWS::StackName" },
                              "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/${FunctionName}:*", {
                        "Region": { "Ref": "AWS::Region" },
                        "AccountId": { "Ref": "AWS::AccountId" },
                        "FunctionName": {
                          "Fn::Sub": [
                            "${Prefix}-lambda-function-${Suffix}", {
                              "Prefix": { "Ref": "AWS::StackName" },
                              "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Sub": [
                "${Prefix}-lambda-policy-${Suffix}", {
                  "Prefix": { "Ref": "AWS::StackName" },
                  "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
                }
              ]
            }
          }
        ]
      }
    },
    "AuthorizerFn": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler=function(d,a,b){a=d.headers.authorization||d.headers.Authorization;if(!a)return b(\"Unauthorized\");a=a.split(\" \")[1];var c=(new Buffer(a,\"base64\")).toString().split(\":\");a=c[0];c=c[1];if(\"admin\"!==a||\"secret\"!==c)return b(\"Unauthorized\");b(null,buildAllowAllPolicy(d,a))};\nfunction buildAllowAllPolicy(d,a){var b=d.methodArn.split(\":\"),c=b[5].split(\"/\");return{principalId:a,policyDocument:{Version:\"2012-10-17\",Statement:[{Action:\"execute-api:Invoke\",Effect:\"Allow\",Resource:[\"arn:aws:execute-api:\"+b[3]+\":\"+b[4]+\":\"+c[0]+\"/\"+c[1]+\"/*/*\"]}]}}};"
        },
        "FunctionName": {
          "Fn::Sub": [
            "${Prefix}-authorizer-function-${Suffix}", {
              "Prefix": { "Ref": "AWS::StackName" },
              "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
            }
          ]
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["LambdaFnRole", "Arn"]
        },
        "Runtime": "nodejs12.x"
      }
    },
    "LambdaFn": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler=function(a,b){b.succeed({statusCode:200,headers:{\"Content-Type\":\"text/html\"},body:\"<h1>It CloudFormation!</h1><pre>\"+JSON.stringify(a,null,2)+\"</pre>\"})};"
        },
        "FunctionName": {
          "Fn::Sub": [
            "${Prefix}-lambda-function-${Suffix}", {
              "Prefix": { "Ref": "AWS::StackName" },
              "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
            }
          ]
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["LambdaFnRole", "Arn"]
        },
        "Runtime": "nodejs12.x"
      }
    },
    "AuthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": [
            "/aws/lambda/${FunctionName}", {
              "FunctionName": {
                "Fn::Sub": [
                  "${Prefix}-authorizer-function-${Suffix}", {
                    "Prefix": { "Ref": "AWS::StackName" },
                    "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
                  }
                ]
              }
            }
          ]
        },
        "RetentionInDays": 90
      }
    },
    "LambdaFnLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": [
            "/aws/lambda/${FunctionName}", {
              "FunctionName": {
                "Fn::Sub": [
                  "${Prefix}-lambda-function-${Suffix}", {
                    "Prefix": { "Ref": "AWS::StackName" },
                    "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
                  }
                ]
              }
            }
          ]
        },
        "RetentionInDays": 90
      }
    },
    "ApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "EndpointConfiguration": {
          "Types": ["REGIONAL"]
        },
        "Name": {
          "Fn::Sub": [
            "${Prefix}-gateway-${Suffix}", {
              "Prefix": { "Ref": "AWS::StackName" },
              "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
            }
          ]
        }
      }
    },
    "ApiGatewayRootMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": { "Ref": "ApiGatewayAuthroizer" },
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${FunctionArn}/invocations", {
                "Region": { "Ref": "AWS::Region" },
                "FunctionArn": { "Fn::GetAtt": ["LambdaFn", "Arn"] }
              }
            ]
          }
        },
        "ResourceId": { "Fn::GetAtt": ["ApiGateway", "RootResourceId"] },
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayRootProxyResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "PathPart": "{proxy+}",
        "ParentId": { "Fn::GetAtt": ["ApiGateway", "RootResourceId"] },
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayRootProxyMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": { "Ref": "ApiGatewayAuthroizer" },
        "RequestParameters": {
          "method.request.path.proxy": true
        },
        "HttpMethod": "ANY",
        "Integration": {
          "CacheKeyParameters": ["method.request.path.proxy"],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${FunctionArn}/invocations", {
                "Region": { "Ref": "AWS::Region" },
                "FunctionArn": { "Fn::GetAtt": ["LambdaFn", "Arn"] }
              }
            ]
          }
        },
        "ResourceId": { "Ref": "ApiGatewayRootProxyResource" },
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayDeployment": {
      "DependsOn": ["ApiGatewayRootMethod", "ApiGatewayRootProxyMethod"],
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": { "Ref": "ApiGateway" },
        "StageName": { "Ref": "ApiGatewayDeploymentStageNameParameter" }
      }
    },
    "ApiGatewayLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": ["LambdaFn", "Arn"] },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${Region}:${AccountId}:${Gateway}/*/*/*", {
              "Region": { "Ref": "AWS::Region" },
              "AccountId": { "Ref": "AWS::AccountId" },
              "Gateway": { "Ref": "ApiGateway" }
            }
          ]
        }
      }
    },
    "ApiGatewayUnauthorizedResponse": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseType": "UNAUTHORIZED",
        "ResponseParameters": {
          "gatewayresponse.header.WWW-Authenticate": "'Basic'"
        },
        "StatusCode": "401",
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayAuthroizerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["apigateway.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": {
            "Fn::Sub": [
              "${Prefix}-authorizer-policy-${Suffix}", {
                "Prefix": { "Ref": "AWS::StackName" },
                "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
              }
            ]
          },
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "lambda:invokeFunction",
              "Resource": { "Fn::GetAtt": ["AuthorizerFn", "Arn"] }
            }]
          }
        }]
      }
    },
    "ApiGatewayAuthroizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerCredentials": { "Fn::GetAtt": ["ApiGatewayAuthroizerRole", "Arn"] },
        "AuthorizerUri": {
          "Fn::Join" : [
            "",
            [
              "arn:aws:apigateway:",
              { "Ref": "AWS::Region" },
              ":lambda:path/2015-03-31/functions/",
              { "Fn::GetAtt": ["AuthorizerFn", "Arn"] },
              "/invocations"
            ]
          ]
        },
        "IdentitySource": "method.request.header.Authorization",
        "Name": {
          "Fn::Sub": [
            "${Prefix}-authorizer-${Suffix}", {
              "Prefix": { "Ref": "AWS::StackName" },
              "Suffix": { "Fn::GetAtt": ["RandomId", "Value"] }
            }
          ]
        },
        "RestApiId": { "Ref": "ApiGateway" },
        "Type": "REQUEST"
      }
    }
  },
  "Outputs": {
    "AWSRegion": {
      "Description": "AWS region",
      "Value": {
        "Fn::Sub": [
          "${Value}", {
            "Value": { "Ref" : "AWS::Region" }
          }
        ]
      }
    },
    "ApiGatewayDeploymentUrl": {
      "Description": "API Gateway Deployment URL",
      "Value": {
        "Fn::Sub": [
          "https://${Gateway}.execute-api.${Region}.amazonaws.com/${StageName}", {
            "Gateway": { "Ref": "ApiGateway" },
            "Region": { "Ref": "AWS::Region" },
            "StageName": { "Ref": "ApiGatewayDeploymentStageNameParameter" }
          }
        ]
      }
    }
  }
}
